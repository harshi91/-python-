class Solution(object):
    def findSubstring(self, s, words):
        """
        :type s: str
        :type words: List[str]
        :rtype: List[int]
        """
        if not s or not words:
            return []
        
        word_len = len(words[0])              # All words have same length
        word_count = len(words)
        substring_len = word_len * word_count  # Total length of concatenated substring
        
        # Count frequency of each word
        word_freq = Counter(words)
        
        result = []
        
        # We slide with different start offsets to cover all cases
        for i in range(word_len):
            left = i
            right = i
            curr_count = Counter()
            count = 0  # Number of words matched
            
            while right + word_len <= len(s):
                # Take a word from the right
                word = s[right:right + word_len]
                right += word_len
                
                # If word is in target list
                if word in word_freq:
                    curr_count[word] += 1
                    count += 1
                    
                    # If word occurs more than allowed, move left pointer
                    while curr_count[word] > word_freq[word]:
                        left_word = s[left:left + word_len]
                        curr_count[left_word] -= 1
                        left += word_len
                        count -= 1
                    
                    # If window matches required word count
                    if count == word_count:
                        result.append(left)
                
                else:
                    # Reset window if word not in dictionary
                    curr_count.clear()
                    count = 0
                    left = right
        
        return result
        
